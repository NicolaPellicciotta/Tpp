import ctypes
import numpy
from numpy import *
import time
from ppmio import *
import atexit
#import world

#from Tkinter
#import Tkinter as Tk
#import tkFont

#from PIL
#from PIL import Image, ImageTk



#libcam=ctypes.cdll.LoadLibrary('libgige.dylib')
#libcam=ctypes.cdll.LoadLibrary('libcam.so')
#libcam=ctypes.cdll.LoadLibrary('libdcam.so')
libcam=ctypes.cdll.LoadLibrary('liborca.so')
libcam.cam_get_shutter.restype=ctypes.c_int
libcam.cam_snap.restype=ctypes.c_int
libcam.cam_snap.argtypes=[ctypes.c_void_p, ctypes.c_void_p, ctypes.c_char_p]
#libcam.cam_get_shutter.argtypes=[ctypes.POINTER(ctypes.c_double), ctypes.c_char_p]
#cps=float(ctypes.c_uint.in_dll(libcam, "CLOCKS_PER_SEC").value)
ErrMsg=ctypes.create_string_buffer(256)

CAMATTRS=["shutter", "gain", "model", "roi", "size"]

class CamError(Exception):
  """Raised when a libcam function returns with an error status

  Attributes:
    fname -- function name
  """
  def __init__(self, msg, code=None):
    self.msg=msg.value
    self.code=code
  def __str__(self):
    if not self.code:
      return self.msg
    else:
      return self.msg+" code: %d" % self.code

#Clean up 

#def cleanup():
# if world.ccd is not None:
#   world.ccd.__del__()

#atexit.register(cleanup)

#======================================
#   gigecam class
#======================================
class Orca:
  empty=array([], uint8)
  def __init__(self):
    self.w=1920
    self.h=1336
    self.dtype=uint16

    self._STREAMING=False
    self._roi=[0,0,1920,1336]
    if(libcam.cam_init(ErrMsg)):
      raise CamError(ErrMsg)
    self.open()
    #world.ccd=self
    #print self.__repr__()

  def shutter(self,val=None):
    if self._STREAMING:
      print "Cannot set cam attributes while streaming"

    if val:
      cval=ctypes.c_double(val)
      if libcam.cam_set_shutter(cval, ErrMsg):
        raise CamError(ErrMsg)

    else:
      cval=ctypes.c_double()
      if libcam.cam_get_shutter(ctypes.byref(cval), ErrMsg):
        raise CamError(ErrMsg)
      else:
        return cval.value

  def roi(self,val=None):
    if self._STREAMING:
      print "Cannot set cam attributes while streaming"

    if val:
      [left,top,w,h]=val
      cleft=ctypes.c_int(left)
      ctop=ctypes.c_int(top)
      cw=ctypes.c_int(w)
      ch=ctypes.c_int(h)
      if libcam.cam_set_roi(cleft,ctop,cw,ch, ErrMsg):
        raise CamError(ErrMsg)
      self._roi=val

    else:
      return self._roi


  def snap(self, bufp=None):
    RETURNS=False
    if self._STREAMING:
      print "Stop stream before snapping"
      return None
    if bufp==None:
      RETURNS=True
      [w,h]=self._roi[2:]
      buf=numpy.zeros((h,w), dtype=numpy.uint16)
      bufp=buf.ctypes.data

    timestamp=ctypes.c_double()
    status=libcam.cam_snap(bufp, ctypes.byref(timestamp), ErrMsg)

    if RETURNS:
      if status==0:
        return frame(buf, timestamp.value, 0)
      else:
        return frame(camera.empty, timestamp.value, 0, status)

  def stream(self, fps):
    [w,h]=self._roi[2:]
    #temporary attributes, to be canceled on stop
    self._buf=numpy.zeros((h,w), dtype=numpy.uint16)
    self._shutter=self.shutter()

    if libcam.cam_stream(ctypes.c_float(fps), ErrMsg):
      raise CamError(ErrMsg)
    self._STREAMING=True

  def capture(self):
    [w,h]=self._roi[2:]
    buf=numpy.zeros((h,w), dtype=numpy.uint16)
    timestamp=ctypes.c_double()
    status=libcam.cam_capture(buf.ctypes.data, ctypes.byref(timestamp), ErrMsg)
    if status==0:
      return frame(buf, timestamp.value, 0)
    else:
      return frame(camera.empty, timestamp.value, 0, status)


  def stop(self):
    self._STREAMING=False
    del self._buf, self._shutter
    if libcam.cam_stop(ErrMsg):
      raise CamError(ErrMsg)


  def open(self):
    if libcam.cam_open(ErrMsg):
      raise CamError(ErrMsg)

  def close(self):
    if libcam.cam_close(ErrMsg):
      raise CamError(ErrMsg)

